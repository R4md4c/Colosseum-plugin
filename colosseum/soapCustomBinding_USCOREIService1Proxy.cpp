/* soapCustomBinding_USCOREIService1Proxy.cpp
   Generated by gSOAP 2.7.16 from colosseumService.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapCustomBinding_USCOREIService1Proxy.h"

CustomBinding_USCOREIService1Proxy::CustomBinding_USCOREIService1Proxy()
{	CustomBinding_USCOREIService1Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CustomBinding_USCOREIService1Proxy::CustomBinding_USCOREIService1Proxy(const struct soap &_soap) :soap(_soap)
{ }

CustomBinding_USCOREIService1Proxy::CustomBinding_USCOREIService1Proxy(soap_mode iomode)
{	CustomBinding_USCOREIService1Proxy_init(iomode, iomode);
}

CustomBinding_USCOREIService1Proxy::CustomBinding_USCOREIService1Proxy(soap_mode imode, soap_mode omode)
{	CustomBinding_USCOREIService1Proxy_init(imode, omode);
}

void CustomBinding_USCOREIService1Proxy::CustomBinding_USCOREIService1Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", NULL, NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", NULL, NULL}, 
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns3", "http://schemas.microsoft.com/2003/10/Serialization/", NULL, NULL},
	{"ns1", "http://tempuri.org/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	this->namespaces = namespaces;
}

CustomBinding_USCOREIService1Proxy::~CustomBinding_USCOREIService1Proxy()
{ }

void CustomBinding_USCOREIService1Proxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void CustomBinding_USCOREIService1Proxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *CustomBinding_USCOREIService1Proxy::soap_fault()
{	return this->fault;
}

const char *CustomBinding_USCOREIService1Proxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *CustomBinding_USCOREIService1Proxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int CustomBinding_USCOREIService1Proxy::soap_close_socket()
{	return soap_closesock(this);
}

void CustomBinding_USCOREIService1Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void CustomBinding_USCOREIService1Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *CustomBinding_USCOREIService1Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int CustomBinding_USCOREIService1Proxy::OpenSession(_ns1__OpenSession *ns1__OpenSession, _ns1__OpenSessionResponse *ns1__OpenSessionResponse)
{	struct soap *soap = this;
	struct __ns1__OpenSession soap_tmp___ns1__OpenSession;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:2222/Service1.svc";
	soap_action = "http://tempuri.org/IService1/OpenSession";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__OpenSession.ns1__OpenSession = ns1__OpenSession;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__OpenSession(soap, &soap_tmp___ns1__OpenSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__OpenSession(soap, &soap_tmp___ns1__OpenSession, "-ns1:OpenSession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__OpenSession(soap, &soap_tmp___ns1__OpenSession, "-ns1:OpenSession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__OpenSessionResponse)
		return soap_closesock(soap);
	ns1__OpenSessionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__OpenSessionResponse->soap_get(soap, "ns1:OpenSessionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CustomBinding_USCOREIService1Proxy::CloseSession(_ns1__CloseSession *ns1__CloseSession, _ns1__CloseSessionResponse *ns1__CloseSessionResponse)
{	struct soap *soap = this;
	struct __ns1__CloseSession soap_tmp___ns1__CloseSession;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:2222/Service1.svc";
	soap_action = "http://tempuri.org/IService1/CloseSession";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__CloseSession.ns1__CloseSession = ns1__CloseSession;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__CloseSession(soap, &soap_tmp___ns1__CloseSession);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__CloseSession(soap, &soap_tmp___ns1__CloseSession, "-ns1:CloseSession", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__CloseSession(soap, &soap_tmp___ns1__CloseSession, "-ns1:CloseSession", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__CloseSessionResponse)
		return soap_closesock(soap);
	ns1__CloseSessionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__CloseSessionResponse->soap_get(soap, "ns1:CloseSessionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CustomBinding_USCOREIService1Proxy::getLimit(_ns1__getLimit *ns1__getLimit, _ns1__getLimitResponse *ns1__getLimitResponse)
{	struct soap *soap = this;
	struct __ns1__getLimit soap_tmp___ns1__getLimit;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:2222/Service1.svc";
	soap_action = "http://tempuri.org/IService1/getLimit";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getLimit.ns1__getLimit = ns1__getLimit;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getLimit(soap, &soap_tmp___ns1__getLimit);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getLimit(soap, &soap_tmp___ns1__getLimit, "-ns1:getLimit", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getLimit(soap, &soap_tmp___ns1__getLimit, "-ns1:getLimit", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getLimitResponse)
		return soap_closesock(soap);
	ns1__getLimitResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getLimitResponse->soap_get(soap, "ns1:getLimitResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CustomBinding_USCOREIService1Proxy::getObject(_ns1__getObject *ns1__getObject, _ns1__getObjectResponse *ns1__getObjectResponse)
{	struct soap *soap = this;
	struct __ns1__getObject soap_tmp___ns1__getObject;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://localhost:2222/Service1.svc";
	soap_action = "http://tempuri.org/IService1/getObject";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__getObject.ns1__getObject = ns1__getObject;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__getObject(soap, &soap_tmp___ns1__getObject);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getObject(soap, &soap_tmp___ns1__getObject, "-ns1:getObject", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getObject(soap, &soap_tmp___ns1__getObject, "-ns1:getObject", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__getObjectResponse)
		return soap_closesock(soap);
	ns1__getObjectResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getObjectResponse->soap_get(soap, "ns1:getObjectResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
